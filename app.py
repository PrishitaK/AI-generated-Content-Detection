import streamlit as st
#Importing the open source version of GPT2
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch
import nltk
nltk.download('punkt')
nltk.download('stopwords')
from nltk.util import ngrams
from nltk.lm.preprocessing import pad_sequence
from nltk.probability import FreqDist
import plotly.express as px
from collections import Counter
from nltk.corpus import stopwords
import string

#Load gpt2 tokenizer and model
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')

#Calculating perplexity and burstiness
def calculate_perplexity(text):
    encoded_input = tokenizer.encode(text, add_special_tokens = False, return_tensors = 'pt')
    input_ids = encoded_input[0]

    with torch.no_grad():
        outputs = model(input_ids)
        logits = outputs.logits
    
    perplexity = torch.exp(torch.nn.functional.cross_entropy(logits.view(-1, logits.size(-1)), input_ids.view(-1)))

    return perplexity.item()

def calculate_burstiness(text):
    tokens = nltk.word_tokenize(text.lower())
    word_freq = FreqDist(tokens)
    repeated_count = sum(count > 1 for count in word_freq.values())

    burstiness_score = repeated_count / len(word_freq)
    
    return burstiness_score

def plot_top_repeated_words(text):
    tokens = text.split()
    stop_words = set(stopwords.words('english'))
    tokens = [token.lower( ) for token in tokens if token.lower() not in stop_words and token.lower() not in string.punctuation]

    #Words Counts
    word_count = Counter(tokens)
    top_words = word_count.most_common(10)

    words = [word for word, count in top_words]
    counts = [count for word, count in top_words]

    #Plotting it
    fig = px.bar(x = words, y = counts, labels = {'x': 'Words', 'y': 'Counts'}, title = 'Top 10 Most Repeated Words')
    st.plotly_chart(fig, use_container_width=True)

st.set_page_config(layout="wide") #In order to utilize the entire width of the page

st.title('AI Plagiarism Detector')

text_input = st.text_area("Enter your text")

if text_input is not None:
    if st.button('Analyse'):
        col1, col2, col3 = st.columns([1,1,1])  ## columns with eqaul widths
        
        with col1:
            st.info("Your Input Text")
            st.success(text_input)
        
        with col2:
            st.info('Calculated Scores')
            perplexity = calculate_perplexity(text_input)
            burstiness = calculate_burstiness(text_input)

            st.success('Perplexity: '+str(perplexity))
            st.success('Burstiness: '+str(burstiness))

            if perplexity > 30000 and burstiness < 0.2:
                st.error("Text Analysis Result: AI Generated Content")
            
            else:
                st.success("Text Analysis Result: Likely not generated by AI")
        
        with col3:
            st.info("Basic Insights")
            plot_top_repeated_words(text_input)